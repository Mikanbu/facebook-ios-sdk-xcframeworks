// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.16.14 clang-1700.3.16.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name FBAEMKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import CommonCrypto
import CommonCrypto.CommonHMAC
import FBSDKCoreKit_Basics
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public typealias FBGraphRequestCompletion = (Any?, (any Swift.Error)?) -> Swift.Void
@objc(FBAEMNetworking) public protocol AEMNetworking {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc(startGraphRequestWithGraphPath:parameters:tokenString:HTTPMethod:completion:) func startGraphRequest(withGraphPath graphPath: Swift.String, parameters: [Swift.String : Any], tokenString: Swift.String?, httpMethod method: Swift.String?, completion: @escaping FBAEMKit.FBGraphRequestCompletion)
  #endif
}
@_inheritsConvenienceInitializers @objcMembers @objc(FBAEMReporter) final public class AEMReporter : ObjectiveC.NSObject {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func configure(networker: (any FBAEMKit.AEMNetworking)?, appID: Swift.String?, reporter: (any FBAEMKit.SKAdNetworkReporting)?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func configure(networker: (any FBAEMKit.AEMNetworking)?, appID: Swift.String?, reporter: (any FBAEMKit.SKAdNetworkReporting)?, analyticsAppID: Swift.String?, store: (any FBSDKCoreKit_Basics.DataPersisting)?)
  #endif
  @objc public static func enable()
  @objc public static func setConversionFilteringEnabled(_ enabled: Swift.Bool)
  @objc public static func setCatalogMatchingEnabled(_ enabled: Swift.Bool)
  @objc public static func setAdvertiserRuleMatchInServerEnabled(_ enabled: Swift.Bool)
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public static func handle(_ url: Foundation.URL?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc(recordAndUpdateEvent:currency:value:parameters:) public static func recordAndUpdate(event: Swift.String, currency: Swift.String?, value: Foundation.NSNumber?, parameters: [Swift.String : Any]?)
  #endif
  @objc override dynamic public init()
  @objc deinit
}
@objc(FBSKAdNetworkReporting) public protocol SKAdNetworkReporting {
  @objc func shouldCutoff() -> Swift.Bool
  @objc(isReportingEvent:) func isReportingEvent(_ event: Swift.String) -> Swift.Bool
  @objc func checkAndRevokeTimer()
}
